/* Grid works for 2 dimensional alignment
Flexbox is good for space distribution */

.grid-container{
    background-color: indianred;
    padding: 20px;
    height: 400px;
    display: grid;
    grid-template-columns: 200px 300px 200px;
    /* grid-template-rows: 100px 200px auto;  */
    column-gap: 30px;
    row-gap: 20px;
    justify-content: space-around;
    align-content: space-around;
}
.grid-item{
    background-color: wheat;
    border: 1px solid black;
    padding: 20px;
    font-size: 40px;   
    text-align: center;
}

/* #grid-1{
       grid-column-start: 1;
       grid-column-end: 3;    --> shorthand for these two is 
       grid-column: 1 / 3 ;     OR "grid-column: 1 / span 2;" 
       grid-row: 1/3;
} */

/* #grid-5{
    grid-area: 1/2/3/4;
} */

/* Properties of grid are
A. 1. display: grid, inline-grid
B. 1. grid-template-columns: 200px 400px auto;  --> to divide in columns (in how much columns it'll be divided), here auto occupy space available
B. 1. grid-template-columns: auto auto auto;    --> to divide all columns equally
B. 1. grid-template-columns: 200px 50% auto
B. 2. grid-template-rows: 100px 200px auto;     --> to define row height
B. 3. grid-column-gap: 30px;      B. 4. grid-row-gap: 30px;
C. justify-content: center;   --> use for horizontal alignment
C. 1. justify-content: start/center/end/space-around/space-between/space-evenly;
D. align-content: end;        --> use for vertical alignment
D. 1. align-content: start/center/end/space-around/space-between/space-evenly;
E. 1. grid-column-start: 1;     grid-column-end: 3;   --> to merge grid columns (used in child)
E. grid-row-start: 1;   grid-row-end: 3;      --> to merge grid rows
F. 1. grid-area: start-row-line/start-col-line/end-row-line/end-col-line;        --> use to merge rows and cols simultaneously
G. grid-auto-rows: 100px; (if we expand height to 100px it'll manage by itself)
H. grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));      // it'll fit boxes to right if enough space for thme