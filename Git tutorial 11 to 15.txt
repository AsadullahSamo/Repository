Tutorial #11     Viewing and changing commits in git

. git log --> To view commits
. git log -p  --> To view all commits with diff
. git log -p -1 --> To view last 3 commits
. git log -3  --> To view 3 comments with diffs
. git log --pretty=oneline --> To view all comments on one line
. git log --pretty=short   --> To view comments in short
. git log --pretty=full    --> To view comments with full
. git log --since=2.days/2.weeks/2.months/2.years   --> To filter commands and see of 2 days back commands OR 2 weeks OR 2 months
. git log --pretty=format:"%an --%ae"   --> To see comments line author_name -- author_email (for more formats search "git smc useful options for git log" on internet and write formats in string)-
. git commit --amend  --> To change and edit commit  (and :wqEnter to move back to git) 

Tutorial #12      Unstaging and unmodifying files in Git

. git restore --staged file_name     --> To unstage file
. git checkout -- file_name   --> To unmodify file (If we changed a file, and we wanna restore content of file, then we use this command, this matches file with previous commit)
. git checkout -f     --> To unmodify entire working directory

Tutorial #13      Working with remote repositories       (Remote repository --> Repository at hosting website or server)
. Github is a website which hosts git repository
. git remote  --> To see remote name
. git remote -v  

Tutorial #14      Setting alias in git
. git config--global alias.any_name --> To replace long command with alias (like)
. git config --global alias.st status    --> To replace git status with git st  (if long command put in quotations) like
. git config --global alias.unstage 'restore --staged --'   --> Here we replaced 'restore --staged --' with unstage

Tutorial #15      Creating and Switching branches in Git

. git checkout -b develop  --> To create new branch named develop and switched to it from master
. git checkout master      --> To switch to branch
. git branch               --> To check branch 
. git branch -v            --> It'll show branch with last commit
. git branch --merged      --> already merged branches
. git branch --no-merged   --> Not merged branches
. git branch -d develop    --> Gives error if develop is not merged
. "" ""     "" -D develop  --> No error and branch gets deleted